package com.prshkv.backendproject.web;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import com.prshkv.backendproject.domain.Exploit;
import com.prshkv.backendproject.domain.ExploitRepository;
import com.prshkv.backendproject.domain.ExploitType;
import com.prshkv.backendproject.domain.ExploitTypeRepository;
import com.prshkv.backendproject.domain.Platform;
import com.prshkv.backendproject.domain.PlatformRepository;



@Controller
public class ExploitController {

    @Autowired
    private ExploitRepository exploitRepository; 

    @Autowired
    private ExploitTypeRepository exploitTypeRepository;

    @Autowired
    private PlatformRepository platformRepository;


    //Main page
    @GetMapping("/")
    public String mainPage(Model model) {
        model.addAttribute("exploits", exploitRepository.findAll());
        return "index";
    }

    //Add new exploit
    @GetMapping("addexploit")
    public String addExploit(Model model) {
        Exploit exploit = new Exploit();
        model.addAttribute("exploit", exploit);
        model.addAttribute("types", exploitTypeRepository.findAll());
        model.addAttribute("platforms", platformRepository.findAll());
        return "addexploit";
    }

    //Save exploit
    @PostMapping("save-exploit")
    public String saveExploit(@ModelAttribute Exploit exploit) {
        if (exploit.getAuthor() == null || exploit.getAuthor().isEmpty()) {
            exploit.setAuthor(getCurrentUsername());
        }
        exploitRepository.save(exploit);
        return "redirect:/";
    }
    
    //View existing exploit
    @GetMapping("exploit/{id}")
    public String viewExploit(@PathVariable("id") Long id, Model model) {
        model.addAttribute("exploit", exploitRepository.findById(id).get());
        return "viewexploit";
    }

    //Delete existing exploit
    @PostMapping("delete-exploit/{id}")
    public String deleteExploit(@PathVariable("id") Long id) {
        Exploit exploit = exploitRepository.findById(id)
            .orElseThrow(() -> new IllegalArgumentException("Invalid exploit ID"));

        authorizeAction(exploit);

        exploitRepository.deleteById(id);
        return "redirect:/";
    }

    //Edit existing exploit
    @GetMapping("editexploit/{id}")
    public String editExploit(@PathVariable("id") Long id, Model model) {
        Exploit exploit = exploitRepository.findById(id)
            .orElseThrow(() -> new IllegalArgumentException("Invalid exploit ID"));

        authorizeAction(exploit);

        model.addAttribute("exploit", exploit);
        model.addAttribute("types", exploitTypeRepository.findAll());
        model.addAttribute("platforms", platformRepository.findAll());
        return "editexploit";
    }
    

    // Get current users username for uservalidation
    private String getCurrentUsername() {
        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
        if (principal instanceof UserDetails userDetails) {
            return userDetails.getUsername();
        }
        return null;
    }

    // Add new types for exploits
    @GetMapping("addType")
    public String addType(Model model) {
        ExploitType exploitType = new ExploitType();
        model.addAttribute("type", exploitType);
        return "addType";
    }

    @PostMapping("saveType")
    public String saveExploit(@ModelAttribute ExploitType exploitType) {
        exploitTypeRepository.save(exploitType);
        return "redirect:/";
    }

    // Add new platforms for exploits
    @GetMapping("addPlatform")
    public String addPlatform(Model model) {
        Platform platform = new Platform();
        model.addAttribute("platform", platform);
        return "addPlatform";
    }

    @PostMapping("savePlatform")
    public String savePlatform(@ModelAttribute Platform platform) {
        platformRepository.save(platform);
        return "redirect:/";
    }

    // Check if user is admin or author
    private void authorizeAction(Exploit exploit) {
        String currentUsername = getCurrentUsername();
        boolean isAdmin = SecurityContextHolder.getContext().getAuthentication().getAuthorities().stream()
                .anyMatch(grantedAuthority -> grantedAuthority.getAuthority().equals("ROLE_ADMIN"));

        if (!isAdmin && !exploit.getAuthor().equals(currentUsername)) {
            throw new AccessDeniedException("You are not authorized to perform this action.");
        }
    }
}
